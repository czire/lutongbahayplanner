import jsPDF from "jspdf";
import { GuestRecipe, GuestMealPlan } from "@/lib/types/guest";

/**
 * Generates a PDF for a single recipe's ingredients
 */
export const generateRecipeIngredientsPDF = (
  recipe: GuestRecipe,
  calculateRecipeCost: (recipe: GuestRecipe) => number
) => {
  const doc = new jsPDF();

  // Title
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  doc.text(`${recipe.name} - Ingredients List`, 20, 30);

  // Date
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  const today = new Date().toLocaleDateString();
  doc.text(`Generated on: ${today}`, 20, 45);

  let yPosition = 65;

  // Recipe info
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Recipe Information", 20, yPosition);
  yPosition += 15;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");

  const recipeCost = calculateRecipeCost(recipe);
  doc.text(`Estimated Cost: P${recipeCost.toFixed(2)}`, 20, yPosition);
  yPosition += 8;

  if (recipe.cookingTime) {
    doc.text(`Cooking Time: ${recipe.cookingTime} minutes`, 20, yPosition);
    yPosition += 8;
  }

  if (recipe.servings) {
    doc.text(`Servings: ${recipe.servings}`, 20, yPosition);
    yPosition += 8;
  }

  if (recipe.description) {
    yPosition += 5;
    doc.setFont("helvetica", "bold");
    doc.text("Description:", 20, yPosition);
    yPosition += 8;

    doc.setFont("helvetica", "normal");
    const lines = doc.splitTextToSize(recipe.description, 160);
    lines.forEach((line: string) => {
      doc.text(line, 20, yPosition);
      yPosition += 6;
    });
  }

  // Ingredients section
  yPosition += 15;
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.text("Ingredients Shopping List", 20, yPosition);
  yPosition += 15;

  if (recipe.ingredients && recipe.ingredients.length > 0) {
    // Table headers
    doc.setFontSize(10);
    doc.setFont("helvetica", "bold");
    doc.text("Ingredient", 20, yPosition);
    doc.text("Quantity", 100, yPosition);
    doc.text("Unit Price", 150, yPosition);
    yPosition += 5;

    // Draw line under headers
    doc.line(20, yPosition, 180, yPosition);
    yPosition += 10;

    doc.setFont("helvetica", "normal");

    recipe.ingredients.forEach((ingredient) => {
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 30;
      }

      const quantityText = ingredient.unit
        ? `${ingredient.quantity} ${ingredient.unit}`
        : ingredient.quantity;
      const priceText =
        ingredient.price > 0 ? `P${ingredient.price.toFixed(2)}` : "N/A";

      doc.text(ingredient.name, 20, yPosition);
      doc.text(quantityText, 100, yPosition);
      doc.text(priceText, 150, yPosition);
      yPosition += 8;
    });

    // Total cost
    yPosition += 10;
    doc.line(20, yPosition, 180, yPosition);
    yPosition += 10;

    doc.setFont("helvetica", "bold");
    doc.setFontSize(12);
    doc.text(`Total Estimated Cost: P${recipeCost.toFixed(2)}`, 20, yPosition);
  } else {
    doc.setFont("helvetica", "normal");
    doc.text("No ingredients listed for this recipe.", 20, yPosition);
  }

  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Generated by Lutong Bahay Planner - Page ${i}/${pageCount}`,
      20,
      285
    );
  }

  // Save the PDF
  const fileName = `${recipe.name
    .replace(/[^a-z0-9]/gi, "_")
    .toLowerCase()}-ingredients-${today.replace(/\//g, "-")}.pdf`;
  doc.save(fileName);
};

/**
 * Generates a grocery list PDF from recipes and meal plan data
 */
export const generateGroceryListPDF = (
  recipes: GuestRecipe[],
  currentMealPlan: GuestMealPlan | undefined,
  calculateRecipeCost: (recipe: GuestRecipe) => number
) => {
  const doc = new jsPDF();

  // Title
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  doc.text("Grocery List & Shopping Guide", 20, 30);

  // Date and budget info
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  const today = new Date().toLocaleDateString();
  doc.text(`Generated on: ${today}`, 20, 45);

  if (currentMealPlan) {
    doc.text(`Budget: ₱${currentMealPlan.budget.toFixed(2)}`, 20, 55);
    doc.text(
      `Meal Plan Period: ${new Date(
        currentMealPlan.startDate
      ).toLocaleDateString()} - ${new Date(
        currentMealPlan.endDate
      ).toLocaleDateString()}`,
      20,
      65
    );
  }

  let yPosition = 85;

  // Consolidated grocery list
  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("Consolidated Grocery List", 20, yPosition);
  yPosition += 15;

  // Collect all ingredients with quantities
  const ingredientMap = new Map<
    string,
    { quantity: string; price: number; unit?: string }
  >();

  recipes.forEach((recipe) => {
    recipe.ingredients?.forEach((ingredient) => {
      const key = ingredient.name.toLowerCase();
      if (ingredientMap.has(key)) {
        const existing = ingredientMap.get(key)!;
        existing.price += ingredient.price || 0;
        // For quantity, we'll just keep the first one for simplicity
      } else {
        ingredientMap.set(key, {
          quantity: ingredient.quantity,
          price: ingredient.price || 0,
          unit: ingredient.unit,
        });
      }
    });
  });

  // Sort ingredients alphabetically
  const sortedIngredients = Array.from(ingredientMap.entries()).sort(
    ([a], [b]) => a.localeCompare(b)
  );

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");

  // Table headers
  doc.setFont("helvetica", "bold");
  doc.text("Ingredient", 20, yPosition);
  doc.text("Quantity", 100, yPosition);
  doc.text("Est. Price", 150, yPosition);
  yPosition += 5;

  // Draw line under headers
  doc.line(20, yPosition, 180, yPosition);
  yPosition += 10;

  doc.setFont("helvetica", "normal");
  let totalGroceryCost = 0;

  sortedIngredients.forEach(([name, details]) => {
    // Check if we need a new page
    if (yPosition > 270) {
      doc.addPage();
      yPosition = 30;
    }

    const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
    const quantityText = details.unit
      ? `${details.quantity} ${details.unit}`
      : details.quantity;

    doc.text(capitalizedName, 20, yPosition);
    doc.text(quantityText, 100, yPosition);
    doc.text(`P${details.price.toFixed(2)}`, 150, yPosition);

    totalGroceryCost += details.price;
    yPosition += 8;
  });

  // Total cost summary
  yPosition += 10;
  doc.line(20, yPosition, 180, yPosition);
  yPosition += 10;

  doc.setFont("helvetica", "bold");
  doc.setFontSize(12);
  doc.text(
    `Total Estimated Cost: P${totalGroceryCost.toFixed(2)}`,
    20,
    yPosition
  );

  if (currentMealPlan) {
    yPosition += 10;
    const budgetPerMeal = currentMealPlan.budget;
    const totalBudget = budgetPerMeal * 3; // Assuming 3 meals max
    const savings = Math.max(0, totalBudget - totalGroceryCost);

    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.text(
      `Total Budget Allocation: P${totalBudget.toFixed(2)}`,
      20,
      yPosition
    );
    yPosition += 8;
    doc.text(`Potential Savings: P${savings.toFixed(2)}`, 20, yPosition);
    yPosition += 8;
    doc.text(
      `Budget Efficiency: ${
        totalBudget > 0
          ? ((totalGroceryCost / totalBudget) * 100).toFixed(1)
          : 0
      }%`,
      20,
      yPosition
    );
  }

  // Add new page for meal details
  doc.addPage();
  yPosition = 30;

  // Meal details section
  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("Meal Details with Ingredients", 20, yPosition);
  yPosition += 20;

  recipes.forEach((recipe, index) => {
    const mealTypes = ["Breakfast", "Lunch", "Dinner"];
    const mealType = mealTypes[index] || `Meal ${index + 1}`;
    const recipeCost = calculateRecipeCost(recipe);

    // Check if we need a new page
    if (yPosition > 220) {
      doc.addPage();
      yPosition = 30;
    }

    // Meal header
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text(`${mealType}: ${recipe.name}`, 20, yPosition);
    yPosition += 10;

    // Cost
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text(`Estimated Cost: P${recipeCost.toFixed(2)}`, 20, yPosition);
    yPosition += 8;

    // Cooking time and servings
    if (recipe.cookingTime) {
      doc.text(`Cooking Time: ${recipe.cookingTime} minutes`, 20, yPosition);
      yPosition += 8;
    }
    if (recipe.servings) {
      doc.text(`Servings: ${recipe.servings}`, 20, yPosition);
      yPosition += 8;
    }

    // Ingredients section
    if (recipe.ingredients && recipe.ingredients.length > 0) {
      yPosition += 5;
      doc.setFont("helvetica", "bold");
      doc.text("Ingredients:", 20, yPosition);
      yPosition += 8;

      doc.setFont("helvetica", "normal");
      recipe.ingredients.forEach((ingredient) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 30;
        }

        const quantityText = ingredient.unit
          ? `${ingredient.quantity} ${ingredient.unit}`
          : ingredient.quantity;
        const priceText =
          ingredient.price > 0 ? ` - P${ingredient.price.toFixed(2)}` : "";

        doc.text(
          `• ${ingredient.name} (${quantityText})${priceText}`,
          25,
          yPosition
        );
        yPosition += 6;
      });
      yPosition += 5;
    }

    // Description
    if (recipe.description) {
      yPosition += 5;
      doc.setFont("helvetica", "bold");
      doc.text("Description:", 20, yPosition);
      yPosition += 8;

      doc.setFont("helvetica", "normal");
      const lines = doc.splitTextToSize(recipe.description, 160);
      lines.forEach((line: string) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 30;
        }
        doc.text(line, 25, yPosition);
        yPosition += 6;
      });
    }

    yPosition += 15; // Space between recipes
  });

  // Footer with app info
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.text(
      `Generated by Lutong Bahay Planner - Page ${i}/${pageCount}`,
      20,
      285
    );
  }

  // Save the PDF
  const fileName = `grocery-list-${today.replace(/\//g, "-")}.pdf`;
  doc.save(fileName);
};
