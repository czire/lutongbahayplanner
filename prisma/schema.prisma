generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String?         @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  provider        String?
  role            String          @default("user")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  hashedPassword  String?         // Added for credentials provider
  
  // Auth.js relations
  accounts        Account[]
  sessions        Session[]
  
  // Your app relations
  mealPlans       MealPlan[]
  userIngredients UserIngredient[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MealPlan {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  startDate  DateTime
  endDate    DateTime
  budget     Float
  meals      Meal[]
  createdAt  DateTime   @default(now())
}

model UserIngredient {
  id        String     @id @default(cuid())
  name      String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  quantity  String?    // e.g., "1 cup", for leftovers tracking
  unit      String?    // e.g., grams, tsp, etc.
  createdAt DateTime   @default(now())
}

model Meal {
  id           String    @id @default(cuid())
  mealPlan     MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId   String
  recipe       Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  date         DateTime
  type         MealType  // breakfast, lunch, dinner
}

model Recipe {
  id             String    @id @default(cuid())
  name           String
  description    String?
  servings       Int
  cookingTime    Int         // in minutes
  costPerServing Float
  image          String?
  ingredients    RecipeIngredient[]
  steps          Step[]
  substitutions  Substitution[]
  meals          Meal[]
  createdAt      DateTime    @default(now())
}

model Ingredient {
  id   String @id @default(cuid())

  name String @unique // Global ingredient reference
  pricePerUnit Float? // Price per unit for this ingredient
  unit String? // e.g., grams, liters, etc.

  createdAt DateTime @default(now())
}

model RecipeIngredient {
  id              String     @id @default(cuid())

  recipe          Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId        String

  name            String
  quantity        String
  unit            String

  price           Float
  pricePerUnit    Float?
  notes           String?

  createdAt       DateTime @default(now())
}

model Step {
  id        String   @id @default(cuid())
  order     Int
  text      String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
}

model Substitution {
  id            String   @id @default(cuid())
  recipe        Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId      String
  originalItem  String   // e.g., "Shrimp"
  alternative   String   // e.g., "Tofu"
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}
